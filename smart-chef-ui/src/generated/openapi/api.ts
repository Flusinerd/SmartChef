/* tslint:disable */
/* eslint-disable */
/**
 * SmartChef API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface Household
 */
export interface Household {
  /**
   *
   * @type {string}
   * @memberof Household
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Household
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Household
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Household
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Household
   */
  users: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Household
   */
  owner: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {number}
   * @memberof InlineResponse200
   */
  count?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  next?: string | null;
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  previous?: string | null;
  /**
   *
   * @type {Array<User>}
   * @memberof InlineResponse200
   */
  results?: Array<User>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2001
   */
  count?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001
   */
  next?: string | null;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001
   */
  previous?: string | null;
  /**
   *
   * @type {Array<PrivateUser>}
   * @memberof InlineResponse2001
   */
  results?: Array<PrivateUser>;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2002
   */
  count?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002
   */
  next?: string | null;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002
   */
  previous?: string | null;
  /**
   *
   * @type {Array<Household>}
   * @memberof InlineResponse2002
   */
  results?: Array<Household>;
}
/**
 *
 * @export
 * @interface PrivateUser
 */
export interface PrivateUser {
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof PrivateUser
   */
  email: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  updatedAt?: string;
}

/**
 * HouseholdsApi - axios parameter creator
 * @export
 */
export const HouseholdsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHousehold: async (
      household?: Household,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/households/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        household,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyHousehold: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("destroyHousehold", "id", id);
      const localVarPath = `/households/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHouseholds: async (
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/households/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateHousehold: async (
      id: string,
      household?: Household,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateHousehold", "id", id);
      const localVarPath = `/households/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        household,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveHousehold: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("retrieveHousehold", "id", id);
      const localVarPath = `/households/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHousehold: async (
      id: string,
      household?: Household,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateHousehold", "id", id);
      const localVarPath = `/households/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        household,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HouseholdsApi - functional programming interface
 * @export
 */
export const HouseholdsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    HouseholdsApiAxiosParamCreator(configuration);
  return {
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createHousehold(
      household?: Household,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Household>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createHousehold(
        household,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyHousehold(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.destroyHousehold(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listHouseholds(
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2002>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listHouseholds(
        page,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateHousehold(
      id: string,
      household?: Household,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Household>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateHousehold(
          id,
          household,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveHousehold(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Household>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.retrieveHousehold(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateHousehold(
      id: string,
      household?: Household,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Household>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateHousehold(
        id,
        household,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HouseholdsApi - factory interface
 * @export
 */
export const HouseholdsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HouseholdsApiFp(configuration);
  return {
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHousehold(
      household?: Household,
      options?: any
    ): AxiosPromise<Household> {
      return localVarFp
        .createHousehold(household, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyHousehold(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .destroyHousehold(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHouseholds(
      page?: number,
      options?: any
    ): AxiosPromise<InlineResponse2002> {
      return localVarFp
        .listHouseholds(page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateHousehold(
      id: string,
      household?: Household,
      options?: any
    ): AxiosPromise<Household> {
      return localVarFp
        .partialUpdateHousehold(id, household, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveHousehold(id: string, options?: any): AxiosPromise<Household> {
      return localVarFp
        .retrieveHousehold(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows Households to be viewed or edited.
     * @param {string} id A UUID string identifying this household.
     * @param {Household} [household]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHousehold(
      id: string,
      household?: Household,
      options?: any
    ): AxiosPromise<Household> {
      return localVarFp
        .updateHousehold(id, household, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HouseholdsApi - object-oriented interface
 * @export
 * @class HouseholdsApi
 * @extends {BaseAPI}
 */
export class HouseholdsApi extends BaseAPI {
  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {Household} [household]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public createHousehold(household?: Household, options?: AxiosRequestConfig) {
    return HouseholdsApiFp(this.configuration)
      .createHousehold(household, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {string} id A UUID string identifying this household.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public destroyHousehold(id: string, options?: AxiosRequestConfig) {
    return HouseholdsApiFp(this.configuration)
      .destroyHousehold(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {number} [page] A page number within the paginated result set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public listHouseholds(page?: number, options?: AxiosRequestConfig) {
    return HouseholdsApiFp(this.configuration)
      .listHouseholds(page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {string} id A UUID string identifying this household.
   * @param {Household} [household]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public partialUpdateHousehold(
    id: string,
    household?: Household,
    options?: AxiosRequestConfig
  ) {
    return HouseholdsApiFp(this.configuration)
      .partialUpdateHousehold(id, household, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {string} id A UUID string identifying this household.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public retrieveHousehold(id: string, options?: AxiosRequestConfig) {
    return HouseholdsApiFp(this.configuration)
      .retrieveHousehold(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows Households to be viewed or edited.
   * @param {string} id A UUID string identifying this household.
   * @param {Household} [household]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdsApi
   */
  public updateHousehold(
    id: string,
    household?: Household,
    options?: AxiosRequestConfig
  ) {
    return HouseholdsApiFp(this.configuration)
      .updateHousehold(id, household, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      user?: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/public/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createprivateUser: async (
      privateUser?: PrivateUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/private/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        privateUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyUser: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("destroyUser", "id", id);
      const localVarPath = `/users/public/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyprivateUser: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("destroyprivateUser", "id", id);
      const localVarPath = `/users/private/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: async (
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/public/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listprivateUsers: async (
      page?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/private/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateUser: async (
      id: string,
      user?: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateUser", "id", id);
      const localVarPath = `/users/public/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateprivateUser: async (
      id: string,
      privateUser?: PrivateUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateprivateUser", "id", id);
      const localVarPath = `/users/private/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        privateUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveUser: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("retrieveUser", "id", id);
      const localVarPath = `/users/public/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveprivateUser: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("retrieveprivateUser", "id", id);
      const localVarPath = `/users/private/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      id: string,
      user?: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateUser", "id", id);
      const localVarPath = `/users/public/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateprivateUser: async (
      id: string,
      privateUser?: PrivateUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateprivateUser", "id", id);
      const localVarPath = `/users/private/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        privateUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      user?: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createprivateUser(
      privateUser?: PrivateUser,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUser>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createprivateUser(privateUser, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.destroyUser(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyprivateUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.destroyprivateUser(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUsers(
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse200>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(
        page,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listprivateUsers(
      page?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2001>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listprivateUsers(page, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateUser(
      id: string,
      user?: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateUser(id, user, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateprivateUser(
      id: string,
      privateUser?: PrivateUser,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUser>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateprivateUser(
          id,
          privateUser,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveUser(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveprivateUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUser>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.retrieveprivateUser(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      id: string,
      user?: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        id,
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateprivateUser(
      id: string,
      privateUser?: PrivateUser,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUser>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateprivateUser(
          id,
          privateUser,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user?: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .createUser(user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createprivateUser(
      privateUser?: PrivateUser,
      options?: any
    ): AxiosPromise<PrivateUser> {
      return localVarFp
        .createprivateUser(privateUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyUser(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .destroyUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyprivateUser(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .destroyprivateUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(page?: number, options?: any): AxiosPromise<InlineResponse200> {
      return localVarFp
        .listUsers(page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listprivateUsers(
      page?: number,
      options?: any
    ): AxiosPromise<InlineResponse2001> {
      return localVarFp
        .listprivateUsers(page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateUser(
      id: string,
      user?: User,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .partialUpdateUser(id, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateprivateUser(
      id: string,
      privateUser?: PrivateUser,
      options?: any
    ): AxiosPromise<PrivateUser> {
      return localVarFp
        .partialUpdateprivateUser(id, privateUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveUser(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .retrieveUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveprivateUser(id: string, options?: any): AxiosPromise<PrivateUser> {
      return localVarFp
        .retrieveprivateUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(id: string, user?: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .updateUser(id, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {PrivateUser} [privateUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateprivateUser(
      id: string,
      privateUser?: PrivateUser,
      options?: any
    ): AxiosPromise<PrivateUser> {
      return localVarFp
        .updateprivateUser(id, privateUser, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {User} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createUser(user?: User, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .createUser(user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {PrivateUser} [privateUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createprivateUser(
    privateUser?: PrivateUser,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .createprivateUser(privateUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public destroyUser(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .destroyUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public destroyprivateUser(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .destroyprivateUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {number} [page] A page number within the paginated result set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public listUsers(page?: number, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .listUsers(page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {number} [page] A page number within the paginated result set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public listprivateUsers(page?: number, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .listprivateUsers(page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {User} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public partialUpdateUser(
    id: string,
    user?: User,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .partialUpdateUser(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {PrivateUser} [privateUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public partialUpdateprivateUser(
    id: string,
    privateUser?: PrivateUser,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .partialUpdateprivateUser(id, privateUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public retrieveUser(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .retrieveUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public retrieveprivateUser(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .retrieveprivateUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {User} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUser(id: string, user?: User, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .updateUser(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows users to be viewed or edited.
   * @param {string} id A UUID string identifying this user.
   * @param {PrivateUser} [privateUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateprivateUser(
    id: string,
    privateUser?: PrivateUser,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .updateprivateUser(id, privateUser, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
